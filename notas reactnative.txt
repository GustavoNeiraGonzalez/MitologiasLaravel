luego de creado el proyecto:

para borrar la plantilla de ejemplo que trae Expo Router y comenzar desde cero. (que lo veo mas entendible)
 npm run reset-project

luego aqui tendremos un index de ejemplo que es la ruta de pantalla principal es decir el home pero el header pertenece a:
 layout que es por ejemplo unos componentes compartidos en cada ruta, por ejemplo el header que tendra cada pantalla o barra de navegacion

EJEMPLO DE LAYOUT

import { Stack } from "expo-router";
import { Text } from "react-native";

export default function RootLayout() {
  return (
    <>
      <Text>este texto aparece en header</Text>
      <Stack />
      <Text>este texto aparece en footer</Text>
    </>
  );
}

aqui <Stack/> representa la pestaña/ruta que estes actualmente es decir el componente fuera de layout
con <Text> vemos que hay uno arriba y abajo de stack, por lo que el de arriba seria un intento de header y
 el de abajo un intento de footer

ahora para definir las rutas de nuestros componentes crearemos un componente login con un texto unicamente 

(
import { View, Text } from "react-native";

export default function LoginScreen() {
    return<View>
        {" "}
        <Text>hello this is the login page</Text>
    </View>
}
)

y ahora haremos lo siguiente en layout usando el index por defecto y el login que creamos:

(
<Stack>
        <Stack.Screen name="Login" options={{ title: "Login Page" }} />
        <Stack.Screen name="index" options={{ title: "Home Page" }} />
</Stack>
)

ahora nos falta navegar a esa pestaña a traves del index, sin modificar nada del index que vino desde el principio de las instrucciones
usaremos Link, lo importamos y lo usaremos, con el href haciendo referencia a la ruta del componente que creamos:

(
import { Text, View } from "react-native";
import {Link} from "expo-router";

export default function Index() {
  return (
    <View
      style={{
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
      }}
    >
      <Text>Edit app/index.tsx to edit this screen.</Text>
      <Link href="/login">Go to Login page</Link>
    </View>
  );
}

)

bien ahora crearemos dentro de la carpeta app, una carpeta (tabs) donde aqui se crean los componentes pestañas/rutas que hacemos, por lo que moveremos
index y login alli.
Y LAYOUT no se mueve allí, se copia y pega es decir 2 layout en app y otro en tabs
que haremos con esto? crearemos un tabs que es el menu de pestaña que esta abajo en muchas apps, este sera en el layout dentro de (tabs) y el de apps lo modificaremos
un poco
(tabs) layout

(
import { Tabs } from "expo-router";

export default function TabsLayout() {
  return (
    <>
      <Tabs>
        <Tabs.Screen name="Login" options={{ title: "Login Page" }} />
        <Tabs.Screen name="index" options={{ title: "Home Page" }} />
      </Tabs>
    </>
  );
}
)
con esto creamos el menu de pestaña de abajo del telefono y lo siguiente haremos en app layout
(
import { Stack } from "expo-router";

export default function RootLayout() {
  return (
    <>
      <Stack>
        <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
      </Stack>
    </>
  );
}

)

que hicimos con esto? que layout en app es la navegacion principal de pestañas y (tabs) la navegacion secundaria y asi agruparlas tambien para el layout principal en app
----------------------
tab bar estilizando:
en tabs podemos cambiarle los colores y, cambiando de color el icono cuando esta activo o inactivo, y mas usando screenoptions:
(
  return (
    <>
      <Tabs screenOptions={{tabBarActiveTintColor:"coral", tabBarActiveBackgroundColor:"#225a8fff",tabBarInactiveTintColor:"white", tabBarInactiveBackgroundColor:"#120b1fff"}}>
        ...
	...
      </Tabs>
    </>
  );

)
tambien podemos agregarles iconos usando la lista de iconos que esta en esta pagina
https://icons.expo.fyi/Index

aqui buscas el icono le das click y te sale la intruccion para importar y usar. importaras el icono. usaremos 2 iconos y agregaremos la opcion de que cambie de 
icono si se ha presionado esa pestaña:

import FontAwesome from '@expo/vector-icons/FontAwesome';
import MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';

<MaterialCommunityIcons name="home-heart" size={24} color={color} /> 
<FontAwesome name="home" size={24} color={color} />

para usarlos serias así dentro de tabs:

(
import { Tabs } from "expo-router";
import FontAwesome from '@expo/vector-icons/FontAwesome';
import MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';
export default function TabsLayout() {
  return (
    <>
      <Tabs screenOptions={{tabBarActiveTintColor:"coral", tabBarActiveBackgroundColor:"#225a8fff",tabBarInactiveTintColor:"white", tabBarInactiveBackgroundColor:"#120b1fff"}}>
        <Tabs.Screen name="login" options={{ title: "Login Page" }} />
        <Tabs.Screen name="index" options={{ title: "Home Page",
         tabBarIcon:({color,focused})=>{
            return focused ? 
            (<MaterialCommunityIcons name="home-heart" size={24} color={color} />) : 
            (<FontAwesome name="home" size={24} color={color} />)
        },
         }} />
      </Tabs>
    </>
  );
}
)

que hicimos?
-usamos la propiedad tabBarIcon para agregar el icono que importamos, tambien usamos color, para que se use el color que usamos anteriormente en screenoptions
  y ademas focused para que podamos cambiar de icono si esta presionado o no. 
- usamos un operador ternario ( ? :) para hacer el uso de un icono u otro. y en color le cambiamos el que venia por defecto por color={color}